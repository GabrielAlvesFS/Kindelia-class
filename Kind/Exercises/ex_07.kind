//Bits

//File for exercises in Bits

//e = empty
//o = 0
//i = 1
type Bits { 
  e
  o(pred: Bits)
  i(pred: Bits)
}

//a = Bits.i(Bits.i(Bits.e))
//b = Bits.o(Bits.i(Bits.i(Bits.e)))
//c = Bits.o(Bits.o(Bits.i(Bits.i(Bits.e))))
//d = Bits.i(Bits.i(Bits.i(Bits.i(Bits.e))))

//-------------------------------------------------------------------------------------------
//Verifies if it is an Empty Bit

//is_empty(a)      -> Bool.false
//is_empty(b)      -> Bool.false
//is_empty(c)      -> Bool.false
//is_empty(d)      -> Bool.false
//is_empty(Bits.e) -> Bool.true
is_empty(b: Bits): Bool
  case b{
    e: Bool.true
  } default Bool.false


  // ex_07: Bool
  //   is_empty(Bits.e)

//-------------------------------------------------------------------------------------------
//Gets the Tail of a Bits structure

//tail(a) -> Bits.i(Bits.e) 1
//tail(b) -> Bits.i(Bits.i(Bits.e)) 3
//tail(c) -> Bits.o(Bits.i(Bits.i(Bits.e))) 6
//tail(d) -> Bits.i(Bits.i(Bits.i(Bits.e))) 7
tail(b: Bits): Bits
   case b{
     e: Bits.e
     o: b.pred
     i: b.pred
   }

  // ex_07: Bits
  
  // let a = Bits.i(Bits.i(Bits.e)) //3
  // let b = Bits.o(Bits.i(Bits.i(Bits.e))) //6
  // let c = Bits.o(Bits.o(Bits.i(Bits.i(Bits.e)))) //12
  // let d = Bits.i(Bits.i(Bits.i(Bits.i(Bits.e)))) //15

  //   tail(a)


//-------------------------------------------------------------------------------------------
//Negates all Bits

//notb(a) -> Bits.o(Bits.o(Bits.e))
//notb(b) -> Bits.i(Bits.o(Bits.o(Bits.e)))
//notb(c) -> Bits.i(Bits.i(Bits.o(Bits.o(Bits.e))))
//notb(d) -> Bits.o(Bits.o(Bits.o(Bits.o(Bits.e))))
notb(b: Bits): Bits
  case b{
    e: Bits.e
    o: Bits.i(notb(b.pred))
    i: Bits.o(notb(b.pred))
  }
  
  // ex_07: Bits
  //  notb(Bits.o(Bits.i(Bits.i(Bits.i(Bits.e)))))



//-------------------------------------------------------------------------------------------
//Increments a Bit

//inc(a) -> Bits.o(Bits.o(Bits.i(Bits.e)))
//inc(b) -> Bits.i(Bits.i(Bits.i(Bits.e)))
//inc(c) -> Bits.i(Bits.o(Bits.i(Bits.i(Bits.e))))
//inc(d) -> Bits.o(Bits.o(Bits.o(Bits.o(Bits.i(Bits.e)))))
inc(b: Bits): Bits
  case b{
    e: Bits.i(Bits.e)
    o: Bits.i(b.pred)
    i: Bits.o(inc(b.pred))
  }

  //            Bits.i(Bits.i(Bits.i(Bits.e))) -> 7            111  0001
  // sucessor:  Bits.o(Bits.o(Bits.o(Bits.i(Bits.e)))) -> 8    0001 1001


  //            Bits.i(Bits.o(Bits.o(Bits.i(Bits.e)))) -> 9    1001  0001
  // sucessor:  Bits.o(Bits.i(bits.o(Bits.i(Bits.e)))) -> 10   0101  1001

  //            Bits.i(Bits.i(Bits.o(Bits.i(Bits.e)))) -> 11   1101 0101
  // sucessor:  Bits.o(Bits.o(Bits.i(Bits.i(Bits.e)))) -> 12   0011 1101


//  ex_07: Bits
//     inc(Bits.o(Bits.i(Bits.o(Bits.i(Bits.e)))))


//-------------------------------------------------------------------------------------------
//Decrements a Bit

//dec(a) -> Bits.o(Bits.i(Bits.e))
//dec(b) -> Bits.i(Bits.o(Bits.i(Bits.e)))
//dec(c) -> Bits.i(Bits.i(Bits.o(Bits.i(Bits.e))))
//dec(d) -> Bits.o(Bits.i(Bits.i(Bits.i(Bits.e))))
dec(b: Bits): Bits
  case b{
    e: Bits.e
    o: Bits.i(dec(b.pred))
    i: 
    case b.pred{
      e: Bits.e
    } default Bits.o(b.pred)

  }


//  ex_07: Bits
//     dec(Bits.i(Bits.e))

//-------------------------------------------------------------------------------------------
//Concatenate two Bits structures

//concat(a,b) -> Bits.i(Bits.i(Bits.o(Bits.i(Bits.i(Bits.e)
//concat(b,c) -> Bits.o(Bits.i(Bits.i(Bits.o(Bits.o(Bits.i(Bits.i(Bits.e)))))))
//concat(c,d) -> Bits.o(Bits.o(Bits.i(Bits.i(Bits.i(Bits.i(Bits.i(Bits.i(Bits.e))))))))
concat(a: Bits, b: Bits): Bits
   case a{
     e: b
     o: Bits.o(concat(a.pred, b))
     i: Bits.i(concat(a.pred, b))
   }

  // ex_07: Bits
  //   concat(Bits.i(Bits.i(Bits.e)), Bits.i(Bits.e))



//-------------------------------------------------------------------------------------------
//Adds two Bits structures
//a = Bits.i(Bits.i(Bits.e)) -> 3
//b = Bits.o(Bits.i(Bits.i(Bits.e))) -> 6
//c = Bits.o(Bits.o(Bits.i(Bits.i(Bits.e))))
//d = Bits.i(Bits.i(Bits.i(Bits.i(Bits.e))))

// add(a,b) -> Bits.i(Bits.o(Bits.o(Bits.i(Bits.e)))) -> 9
// add(b,c) -> Bits.o(Bits.i(Bits.o(Bits.o(Bits.i(Bits.o(Bits.e)))))) -> 010010
// add(c,d) -> Bits.i(Bits.i(Bits.o(Bits.i(Bits.i(Bits.e))))) -> 11011
add(a: Bits, b: Bits): Bits 
  case a{
    e: b
    o: 
    case b {
      e: a       
      o: add(inc(a), dec(b))                                                                              
      i: add(inc(a), dec(b))                                              
    }

    i: 
    case b{
      e: a
      o: add(inc(a), dec(b))
      i: add(inc(a), dec(b))
    }
  } 
  //                              1 
  // Bits.i(Bits.e) 1            1e
  // Bits.i(Bits.e) 1            1e
  // Bits.o(Bits.i(Bits.e)) 2    01
  // case acum{
  //   e: Bits.e
  //   o:
  //     case a{
  //     e: 
  //       case b{
  //         e: Bits.e
  //         o: Bits.i( add(a.pred, b.pred, Bits.o) )
  //         i: Bits.o( add(a.pred, b.pred, Bits.o) )
  //       }
  //     o: 
  //       case b{
  //         e: Bits.i( add(a.pred, b.pred, Bits.o) )
  //         o: Bits.o( add(a.pred, b.pred, Bits.o) )
  //         i: Bits.i( add(a.pred, b.pred, Bits.o) )
  //       }

  //     i:
  //       case b{
  //         e: Bits.o( add(a.pred, b.pred, Bits.o) )
  //         o: Bits.i( add(a.pred, b.pred, Bits.o) )
  //         i: Bits.o( add(a.pred, b.pred, Bits.i) )
  //       }
  //     }

  //   i:
  //     case a{
  //     e: 
  //       case b{
  //         e: Bits.i( add(a.pred, b.pred, Bits.i))
  //         o: ?
  //         i: ?
  //       }
  //     o: 
  //       case b{
  //         e: ?
  //         o: Bits.i( add(a.pred, b.pred, Bits.o))
  //         i: ?
  //       }
  //     i: 
  //       case b{
  //         e: Bits.i( add(a.pred, b.pred, Bits.i))
  //         o: ?
  //         i: Bits.i( add(a.pred, b.pred, Bits.i))
  //       }
  //     }
  // }

  // ex_07: Bits

  // let a = Bits.i(Bits.i(Bits.e)) //3
  // let b = Bits.o(Bits.i(Bits.i(Bits.e))) //6
  // let c = Bits.o(Bits.o(Bits.i(Bits.i(Bits.e)))) //12
  // let d = Bits.i(Bits.i(Bits.i(Bits.i(Bits.e)))) //15

  // add(a, b)

  // 3 + 6 = 9
  // inc(3) + 5 =9
  // inc(4) + 4 =9
  // inc(5) + 4 =9
  // inc(6) + 3 =9
  // inc(7) + 2 =9 
  // inc(8) + 1 =9   



//-------------------------------------------------------------------------------------------
//Returns Bits.i if only both bits are Bits.i

//and(a,b) -> Bits.o(Bits.i(Bits.e))
//and(b,c) -> Bits.o(Bits.o(Bits.i(Bits.e)))
//and(c,d) -> Bits.o(Bits.o(Bits.i(Bits.i(Bits.e))))
and(a: Bits, b: Bits): Bits
  case a{
    e: Bits.e
    o: 
    case b{
      e: Bits.e
    } default Bits.o(and(a.pred, b.pred))

    i: 
    case b{
      e: Bits.e
      o: Bits.o(and(a.pred, b.pred))
      i: Bits.i(and(a.pred, b.pred))
    }
  }


// ex_07: Bits
//   and(Bits.o(Bits.i(Bits.i(Bits.e))), Bits.o(Bits.o(Bits.i(Bits.i(Bits.e)))))



//-------------------------------------------------------------------------------------------
//Returns Bits.i if any of bits are Bits.i

//a = Bits.i(Bits.i(Bits.e)) -> 3
//b = Bits.o(Bits.i(Bits.i(Bits.e))) -> 6
//c = Bits.o(Bits.o(Bits.i(Bits.i(Bits.e))))
//d = Bits.i(Bits.i(Bits.i(Bits.i(Bits.e))))

//or(a,b) -> Bits.i(Bits.i(Bits.i(Bits.e)))
//or(b,c) -> Bits.o(Bits.i(Bits.i(Bits.i(Bits.e))))
//or(c,d) -> Bits.i(Bits.i(Bits.i(Bits.i(Bits.e))))
or(a: Bits, b: Bits): Bits
  case a{
    e: 
    case b{
      e: Bits.e
      i: Bits.i(or(a, b.pred))
      o: Bits.o(or(a, b.pred))
    }

    o:
    case b{
      e: Bits.o(or(a.pred, b))
      i: Bits.i(or(a.pred, b.pred))
      o: Bits.o(or(a.pred, b.pred))
    }

    i: 
    case b{
      e: Bits.i(or(a.pred, b))
    } default Bits.i(or(a.pred, b.pred))

  }

// ex_07: Bits

//   let a = Bits.i(Bits.i(Bits.e)) //3
//   let b = Bits.o(Bits.i(Bits.i(Bits.e))) //6
//   let c = Bits.o(Bits.o(Bits.i(Bits.i(Bits.e)))) //12
//   let d = Bits.i(Bits.i(Bits.i(Bits.i(Bits.e)))) //15

//   or(b, c)  


//-------------------------------------------------------------------------------------------
//Verifies if both Bit structures are equal

//eql(a,b) -> Bool.false
//eql(b,c) -> Bool.false
//eql(d,d) -> Bool.true
eql(a: Bits, b: Bits): Bool
  case a b{
    e e: Bool.true
    o o: eql(a.pred, b.pred)
    i i: eql(a.pred, b.pred)
  } default Bool.false

// ex_07: Bool

//   let a = Bits.i(Bits.i(Bits.e)) //3
//   let b = Bits.o(Bits.i(Bits.i(Bits.e))) //6
//   let c = Bits.o(Bits.o(Bits.i(Bits.i(Bits.e)))) //12
//   let d = Bits.i(Bits.i(Bits.i(Bits.i(Bits.e)))) //15

//   eql(d, d)    


//-------------------------------------------------------------------------------------------
//Reverses a Bits structure

reverse_go(b: Bits, acum: Bits): Bits
  case b{
    e: acum
    o: reverse_go(b.pred, Bits.o(acum))
    i: reverse_go(b.pred, Bits.i(acum))
  }
  


//reverse(a) -> Bits.i(Bits.i(Bits.e))
//reverse(b) -> Bits.i(Bits.i(Bits.o(Bits.e)))
//reverse(c) -> Bits.i(Bits.i(Bits.o(Bits.o(Bits.e))))
//reverse(d) -> Bits.i(Bits.i(Bits.i(Bits.i(Bits.e))))
reverse(b: Bits): Bits
  reverse_go(b, Bits.e)

// ex_07: Bits

//   let a = Bits.i(Bits.i(Bits.e)) //3
//   let b = Bits.o(Bits.i(Bits.i(Bits.e))) //6
//   let c = Bits.o(Bits.o(Bits.i(Bits.i(Bits.e)))) //12
//   let d = Bits.i(Bits.i(Bits.i(Bits.i(Bits.e)))) //15

//   reverse(c)  



//-------------------------------------------------------------------------------------------
//Gets the length of the Bits structure

length_go(bs: Bits, acum: Nat): Nat
  case bs{
    e: acum
  } default length_go(bs.pred, Nat.succ(acum))
  


//length(a) -> Nat.succ(Nat.succ(Nat.zero))
//length(b) -> Nat.succ(Nat.succ(Nat.succ(Nat.zero)))
//length(c) -> Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.zero))))
//length(d) -> 4
length(bs: Bits): Nat
  length_go(bs, 0)

// ex_07: Nat

//   let a = Bits.i(Bits.i(Bits.e)) //3
//   let b = Bits.o(Bits.i(Bits.i(Bits.e))) //6
//   let c = Bits.o(Bits.o(Bits.i(Bits.i(Bits.e)))) //12
//   let d = Bits.i(Bits.i(Bits.i(Bits.i(Bits.e)))) //15

//   length(d)  



//-------------------------------------------------------------------------------------------
//Multiplies two Bits structures

addNat(a: Nat, b: Nat): Nat
  case a{
    zero: b
    succ: case b{
           zero: a
           succ: Nat.succ(Nat.succ(addNat(a.pred, b.pred)))    
          }
  }

mulNat(a: Nat, b: Nat): Nat
  case a {
    zero: Nat.zero
    succ: case b{
          zero: Nat.zero
          //      add|    a        |  b
          succ: addNat(mulNat(a.pred, b), b) 
    }
  }

mul(a: Bits, b: Bits): Bits
  let aa = Bits.to_nat(a)
  let bb = Bits.to_nat(b)
  Nat.to_bits(mulNat(aa, bb))
  
   
//mul(a,b) -> Bits.o(Bits.i(Bits.o(Bits.o(Bits.i(Bits.e)))))
//mul(b,c) -> Bits.o(Bits.o(Bits.o(Bits.i(Bits.o(Bits.o(Bits.i(Bits.e)))))))
// mul(a: Bits, b: Bits): Bits
  // mul_go(a, b, Bits.e)

ex_07: Bits

  let a = Bits.i(Bits.i(Bits.e)) //3
  let b = Bits.o(Bits.i(Bits.i(Bits.e))) //6
  let c = Bits.o(Bits.o(Bits.i(Bits.i(Bits.e)))) //12
  let d = Bits.i(Bits.i(Bits.i(Bits.i(Bits.e)))) //15

  mul(b,c) 


//-------------------------------------------------------------------------------------------
//Drops a n Number of Bits starting from from the least significative bit

//drop(a) -> Bits.i(Bits.e)
//drop(b) -> Bits.i(Bits.i(Bits.e))
//drop(c) -> Bits.o(Bits.i(Bits.i(Bits.e)))
//drop(d) -> Bits.i(Bits.i(Bits.i(Bits.e)))
drop(n: Nat, bs: Bits): Bits
  case n{
    zero: bs
    succ:
    case bs{
      e: Bits.e
    } default drop(n.pred, bs.pred) 
  }


  // ex_07: Bits
  //   drop(2, Bits.i(Bits.i(Bits.e)))

  

//-------------------------------------------------------------------------------------------
//Takes n Bits from the structure, starting from the least significative bit

//take(1, a) -> Bits.i(Bits.e)
//take(2, b) -> Bits.o(Bits.i(Bits.e))
//take(3, c) -> Bits.o(Bits.o(Bits.i(Bits.e)))
//take(4, d) -> Bits.i(Bits.i(Bits.i(Bits.i(Bits.e))))
take(n: Nat, bs: Bits): Bits
  case n{
    zero: Bits.e
    succ: 
    case bs{
      e: Bits.e
      o: Bits.o(take(n.pred, bs.pred))
      i: Bits.i(take(n.pred, bs.pred))
    }
  }


  // pegar uma parte 

// ex_07: Bits

//   let a = Bits.i(Bits.i(Bits.e)) //3
//   let b = Bits.o(Bits.i(Bits.i(Bits.e))) //6
//   let c = Bits.o(Bits.o(Bits.i(Bits.i(Bits.e)))) //12
//   let d = Bits.i(Bits.i(Bits.i(Bits.i(Bits.e)))) //15

//   take(3, b)

ex_07: IO<Unit>
  IO {
    Tests._07.is_empty(is_empty)
    Tests._07.tail(tail)
    Tests._07.not(notb)
    Tests._07.inc(inc)
    Tests._07.dec(dec)
    Tests._07.concat(concat)
    Tests._07.add(add)
    Tests._07.and(and)
    Tests._07.eql(eql)
    Tests._07.reverse(reverse)
    Tests._07.length(length)
    Tests._07.mul(mul)
    Tests._07.drop(drop)
    Tests._07.take(take)
  }
