// type PairBool
// Contains 2 Booleans inside it
type PairBool { 
  new(fst: Bool, snd: Bool)
}

//------------------------------------------------------------------
// Returns the first element of a pair
fst(pair: PairBool): Bool
  case pair{
    new: pair.fst
  }

// ex_02: Bool
//   fst(PairBool.new(Bool.true, Bool.false))


//------------------------------------------------------------------
// Returns the second element of a pair
snd(pair: PairBool): Bool
  case pair{
    new: pair.snd
  }

  // ex_02: Bool
  //   snd(PairBool.new(Bool.true, Bool.false))


//------------------------------------------------------------------
// Returns true if both elements of a PairBool are identical
eql_elements(a: PairBool): Bool 
  case a{
    new: 
    case a.fst{
      true: a.snd

      false: 
      case a.snd{
        true: Bool.false
        false: Bool.true
      }
    }
  }

  // ex_02: Bool
  //   eql_elements(PairBool.new(Bool.true, Bool.true))
  

//------------------------------------------------------------------  
// Returns true if both Pairs are equal 
// eql(PairBool.new(false, false), PairBool.new(true, true)) -> false 
// eql(PairBool.new(true, false), PairBool.new(true, false)) -> true
eql(a: PairBool, b: PairBool): Bool
  case a{
    new: 
    case b{ 
      new: 
      case eql_elements(PairBool.new(a.fst, b.fst)){
        true: eql_elements(PairBool.new(a.snd, b.snd))
        false: Bool.false
      }      
    }

  }

  // ex_02: Bool
  //   eql(PairBool.new(true, false), PairBool.new(false, false))


//------------------------------------------------------------------
// Returns true if both Pairs are different
// not_eql(PairBool.new(false, false), PairBool.new(true, true)) -> true 
// not_eql(PairBool.new(true, false), PairBool.new(true, false)) -> false
not_eql(a: PairBool, b: PairBool): Bool
  case eql(a, b) {
    true: Bool.false
    false: Bool.true
  }


  // case a{
  //   new: 
  //       case b{ 
  //         new: case eql_elements(PairBool.new(a.fst, b.fst)){
  //               true: 
  //               case eql_elements(PairBool.new(a.snd, b.snd)){
  //                 true: Bool.false
  //                 false: Bool.true
  //               }

  //               false: Bool.true
  //         }
               
  //       }
  // }

  // ex_02: Bool
  //   not_eql(PairBool.new(false, true), PairBool.new(false, true))
  

//------------------------------------------------------------------  
// Creates a PairBool from 2 Booleans
create(a: Bool, b: Bool): PairBool
  PairBool.new(a, b)

  // ex_02: PairBool
  //   create(Bool.true, Bool.true)   



//------------------------------------------------------------------
// Inverts the values of a PairBool
// neg(PairBool.new(false, false) -> PairBool.new(true, true)
// neg(PairBool.new(false, true) -> PairBool.new(true, false)
neg(pair: PairBool): PairBool
  case pair{
    new: PairBool.new(case pair.fst{ true: Bool.false false: Bool.true}, case pair.snd{ true: Bool.false false: Bool.true})
    
  }

  // Primeiro m√©todo que eu fiz:
  // case pair.fst{
  //     true:
  //     case pair.snd{
  //       true: PairBool.new(Bool.false, Bool.false)
  //       false: PairBool.new(Bool.false, Bool.true)
  //     }
  //     false:
  //     case pair.snd{
  //       true: PairBool.new(Bool.true, Bool.false)
  //       false: PairBool.new(Bool.true, Bool.true)
  //     }
  //   }

  // ex_02: PairBool
  //   neg(PairBool.new(true, true))


//------------------------------------------------------------------
// Inverts the 2 elements of a PairBool
swap(pair: PairBool): PairBool 
   case pair{
      new: PairBool.new(pair.snd, pair.fst)       
   }

  //  ex_02: PairBool
  //    swap(PairBool.new(false, true))


ex_02: IO<Unit>
  IO {
    Tests._02.fst(fst)
    Tests._02.snd(snd)
    Tests._02.eql_elements(eql_elements)
    Tests._02.eql(eql)
    Tests._02.not_eql(not_eql)
    Tests._02.create(create)
    Tests._02.neg(neg)
    Tests._02.swap(swap)
  }
